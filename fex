#!/bin/bash
shopt -s expand_aliases

BUSYBOX_PATH=${BUSYBOX-/bin/busybox}

test -x ${BUSYBOX_PATH} && alias test="${BUSYBOX_PATH} test"
test -x ${BUSYBOX_PATH} && alias which="${BUSYBOX_PATH} which"
test -x ${BUSYBOX_PATH} && alias which="${BUSYBOX_PATH} echo"
test -x ${BUSYBOX_PATH} && alias which="${BUSYBOX_PATH} printf"
test -x ${BUSYBOX_PATH} && alias which="${BUSYBOX_PATH} wc"
test -x ${BUSYBOX_PATH} && alias which="${BUSYBOX_PATH} basename"

LOGGER_PATH=$(which logger)
test -z ${LOGGER_PATH} && alias logger="${BUSYBOX_PATH} logger -s -t fexcli" || alias logger="${LOGGER_PATH} -s -p 3 -t fexcli"

function error() {
	logger "$1"
	exit
}

# Test head
test -z $(which head) && alias head="${BUSYBOX_PATH} head"
test $(echo TEST | head) = "TEST" || error "Command <head> not found."

# Test tail
test -z $(which tail) && alias tail="${BUSYBOX_PATH} tail"
test $(echo TEST | tail) = "TEST" || error "Command <tail> not found."

# Test tr
test -z $(which tr) && alias tr="${BUSYBOX_PATH} tr"
test $(echo TEST | tr "T" "V" | tr -d "V") = "ES" || error "Command <tr> not found."

# Test cat
test -z $(which cat) && alias cat="${BUSYBOX_PATH} cat"
test $(echo TEST | cat) = "TEST" || error "Command <cat> not found."

# Test sed
test -z $(which sed) && alias sed="${BUSYBOX_PATH} sed"
test $(echo TEST) = "TEST" || error "Command <sed> not found."

# Test grep
test -z $(which grep) && alias grep="${BUSYBOX_PATH} grep"
test $(echo TEST | grep -i -e "^TEST$") = "TEST" || error "Command <grep> not found."

# Test base64 encode
test -z $(which base64) && alias base64_e="${BUSYBOX_PATH} base64" || alias base64_e=base64
test $(echo TEST | base64_e) = "VEVTVAo=" || error "Command <base64> not found."

# Test base64 decode
BASE64_LINUX_STYLE=$(echo TEST | base64_e | base64_e -d 2>/dev/null;true)
BASE64_MAC_STYLE=$(echo TEST | base64_e | base64_e -D 2>/dev/null;true)
test "${BASE64_LINUX_STYLE}" != "TEST" -a "${BASE64_MAC_STYLE}" != "TEST" && error "Command <base64> not found."
test "${BASE64_LINUX_STYLE}" = "TEST" && alias base64_d="base64_e -d"
test "${BASE64_MAC_STYLE}" = "TEST" && alias base64_d="base64_e -D"

# Curl
CURL_PATH=$(which curl)
alias curl="${CURL-$CURL_PATH} -A 'fexcli v0.0.1'"

QUIET=

FEX_API_VERSION=v1

function fex_help() {
cat << EOF
Man:
	Комманда : Возв. тип					- Описание.
	fex login <phone> <password> : TOKEN			- Вход

	fex file TOKEN list					- Список объектов.
	fex file TOKEN add FILE <DIR_ID> : FILE_ID		- Добавить новый файл.
	fex -q file TOKEN add FILE <DIR_ID> : FILE_ID		- Добавить новый файл без прогрессбара.
	fex file TOKEN del FILE_ID [FILE_ID] [FILE_ID]		- Удалить файл. Нельзя одновременно удалять из разных директорий.
	fex file TOKEN get FILE_ID <PATH> : FILE_NAME		- Скачать файл.
	fex --quiet file TOKEN get FILE_ID <PATH> : FILE_NAME	- Скачать файл без прогрессбара.

	fex dir TOKEN del DIR_ID				- Удалить папу
	fex dir TOKEN add NAME <PARENT_DIR_ID> : DIR_ID		- Добавить папку

	fex name TOKEN <name> <DIR_ID> : NAME			- Задать имя
	
	fex share TOKEN <dir_id> : SHARE_CODE			- Расшарить
	fex unshare TOKEN <SHARE_CODE>				- Не шарить
	
	fex anonymous : ATOKEN					- Вход под анонимом
	
	fex create ATOKEN : SHARE_CODE		- Создать новое хранилище
	fex file ATOKEN list share/SHARE_CODE					- Список объектов.
	
	Все остальное кроме share/unshare так же.
	
Example:
	#Отправить файл зарегистрированым пользователем.
	TOKEN=\$(fex login username password)
	DIR=\$(fex dir "\$TOKEN" add Test)
	fex file "\$TOKEN" add /tmp/testfile.txt \$DIR
	LINK=\$(fex share "\$TOKEN" \$DIR)
	echo "Скинуть другу https://fex.net/s/\$LINK"
	
	
	#Отправить файл анонимно
	TOKEN=\$(fex anonymous)
	LINK=\$(fex create "\$TOKEN")
	DIR=\$(fex dir "\$TOKEN" add Test)
	fex file "\$TOKEN" add /tmp/testfile.txt \$DIR
	echo "Скинуть другу https://fex.net/s/\$LINK"
EOF
}

function fex_login(){
	REQUEST="{\"password\":\"$3\",\"login\":\"$2\"}"
	PHONE=$(echo "$2" | sed -n -E 's/^(\+[0-9]{8,})$/\1/p')
	test "$2" == "${PHONE}" && REQUEST="{\"password\":\"$3\",\"phone\":\"$2\"}"
	DATA=$(curl --silent -H 'Content-type: application/json; charset=utf-8' -X POST -d "${REQUEST}" https://api.fex.net/api/${FEX_API_VERSION}/auth/signin)
	TOKEN=$(echo "${DATA}" | tr -d "\r\n" | sed -n -E 's/.*"token":"([^"]+)".*/\1/p')
	test -z "${TOKEN}" && error "Invalid login or password."
	echo "${TOKEN}"
}

function fex_anonymous(){
	DATA=$(curl --silent -X GET https://api.fex.net/api/${FEX_API_VERSION}/config/anonymous)
	TOKEN=$(echo "${DATA}" | tr -d "\r\n" | sed -n -E 's/.*"anonym_token":"([^"]+)".*/\1/p')
	test -z "${TOKEN}" && error "Invalid get token."
	echo "${TOKEN}"
}

function fex_file_folder_list() {
	RESPONSE=$(curl --silent -H "authorization: Bearer ${FEX_TOKEN}" https://api.fex.net/api/${FEX_API_VERSION}/file/$1 | sed -n -E 's/.*"children":\[(\{.*\})\].*parent_id.*/\1/p' | sed -e 's/},{/}\'$'\n{/g'  )
	DATA=$(echo -e "${DATA}\n${RESPONSE}")
	IDS=$(echo "${RESPONSE}" | sed -E 's/.*"id":([0-9]+)"?.*parent_id.*/\1/g')
	for OBJ_ID in ${IDS}
	do
		IS_DIR=$(echo "${DATA}" | grep "\"id\":${OBJ_ID}" | sed -n -E 's/.*is_dir":(true|false).*/\1/p' | sed -e 's/true/1/g' -e 's/false/0/g')
		NAME=$(echo "${DATA}" | grep "\"id\":${OBJ_ID}" | sed -n -E 's/.*name":"([^"]+)".*/\1/p' )
		CRC32=$(echo "${DATA}" | grep "\"id\":${OBJ_ID}" | sed -n -E 's/.*crc32":"([^"]+)".*/\1/p' )
		IS_PUBLIC=$(echo "${DATA}" | grep "\"id\":${OBJ_ID}" | sed -n -E 's/.*is_public":(true|false).*/\1/p' | sed -e 's/true/1/g' -e 's/false/0/g')
		STR_DIR=$(echo "${IS_DIR}" | sed 's/1/\//g' | sed 's/0//g')
		printf "%-10s	%-1s	%-1s	%8s	%s%s\n" "${OBJ_ID}" "${IS_DIR}" "${IS_PUBLIC}" "${CRC32}" "${2}${NAME}" "${STR_DIR}"
		test "${IS_DIR}" == "1" && fex_file_folder_list "${OBJ_ID}" "${2}${NAME}/"
	done
}

function fex_file_list() {
	DATA=""
	echo "ID		ISD	ISP	CRC32		NAME"
	fex_file_folder_list "$4" ""
	return 0
}

function fex_file_del(){
	FILES=$(echo "$@" | sed -E 's/.*del (.*)/\1/g' | tr " " ",")
	RESULT=$(curl --silent -H "authorization: Bearer ${FEX_TOKEN}" -X DELETE -H 'Content-Type: application/json' -d "{\"files_ids\":[${FILES}]}" https://api.fex.net/api/${FEX_API_VERSION}/file/delete)
	#test "${RESULT}" == "1" && return 0 || return 1
}

function fex_file_add(){
	IS_ANONIMOUS=$(echo "${FEX_TOKEN}" | sed -n -E 's/.*\.([^\.]{44}).*/\1/p' | base64_d | sed -E 's/.*"u":0,.*/anonymous\/file/g' | sed -E 's/.*"u":[^0][0-9]+,.*/file\/upload/g')
	SIZE=$(wc -c "$4" | sed -n -E 's/[^0-9]*([0-9]+).*/\1/p')
	NAME=$(basename "$4")
	DIR="$5"
	test -z "${DIR}" && DIR='null'
	DATA=$(curl --silent  -H "authorization: Bearer ${FEX_TOKEN}" -H 'Content-Type: application/json' -d "{\"directory_id\":${DIR},\"size\":${SIZE},\"name\":\"${NAME}\"}" https://api.fex.net/api/${FEX_API_VERSION}/${IS_ANONIMOUS})
	UPLOAD_URL=$(echo "$DATA" | sed -n -E 's/.*"location":"([^"]+)".*/\1/p')
	curl --silent  -H "authorization: Bearer ${FEX_TOKEN}" -H 'fsp-version: 1.0.0' -H 'fsp-offset: 0' -H "fsp-size: ${SIZE}" -X POST --data '' ${UPLOAD_URL}
	RESPONSE=$(curl ${QUIET} -H "authorization: Bearer ${FEX_TOKEN}" --show-error --progress-bar -H 'fsp-version: 1.0.0' -H 'fsp-offset: 0' -H "fsp-size: ${SIZE}" -X PATCH --upload-file $4 ${UPLOAD_URL})
	echo "${RESPONSE}" | sed -n -E 's/.*"id":([^",]+)?.*/\1/p'
}

function fex_file_get(){
	DATA=$(curl -H "authorization: Bearer ${FEX_TOKEN}" https://api.fex.net/api/${FEX_API_VERSION}/file/$4)
	DOWNLOAD_URL=$(echo "${DATA}" | sed -n -E 's/.*"download_url":"([^"]+)".*parent_id.*/\1/p')
	FILE="-O"
	test "$5" != "" && FILE="-o $5"
	curl ${QUIET} --show-error --progress-bar -H "authorization: Bearer ${FEX_TOKEN}" -w %{filename_effective} ${FILE} ${DOWNLOAD_URL}
}

function fex_dir_add(){
	IS_ANONIMOUS=$(echo "${FEX_TOKEN}" | sed -n -E 's/.*\.([^\.]{44}).*/\1/p' | base64_d | sed -E 's/.*"u":0,.*/anonymous\/directory/g' | sed -E 's/.*"u":[^0][0-9]+,.*/file\/create-dirs/g')
	DATA=$(curl --silent -H "authorization: Bearer ${FEX_TOKEN}" -H 'Content-Type: application/json' -d "{\"names\":[\"$4\"]}" https://api.fex.net/api/${FEX_API_VERSION}/${IS_ANONIMOUS}/$5)
	OBJ_ID=$( echo "${DATA}" | sed -n -E 's/.*"id":"?([^",]+)"?.*parent_id.*/\1/p' )
	#RESULT=$( echo "${DATA}" | sed -n -E 's/.*result":([0-9]+).*/\1/p' )
	echo "${OBJ_ID}"
	#test "${RESULT}" == "1" && return 0 || return 1
}

function fex_dir_del(){
	fex_file_del "$@"
}

function fex_name(){
	DATA=$(curl --silent -H "authorization: Bearer ${FEX_TOKEN}" -X PUT -H 'Content-Type: application/json' -d "{\"name\":\"$3\"}" https://api.fex.net/api/${FEX_API_VERSION}/file/rename/$4)
	echo "${DATA}" | sed -n -E 's/.*"name":"([^"]+)".*/\1/p'
}

function fex_share(){
	DATA=$(curl --silent -H "authorization: Bearer ${FEX_TOKEN}" -H 'Content-Type: application/json' -d "{\"files_ids\":[$3],\"title\":\"\"}" https://api.fex.net/api/${FEX_API_VERSION}/file/share)
	echo "${DATA}" | sed -n -E 's/.*"link":"([^"]*)".*/\1/p'
}

function fex_unshare(){
	DATA=$(curl --silent -H "authorization: Bearer ${FEX_TOKEN}" -X DELETE https://api.fex.net/api/${FEX_API_VERSION}/file/share/$3)
}

function fex_file(){
	fex_file_${3-list} "$@"
}

function fex_dir(){
	fex_dir_${3-list} "$@"
}

function fex_create(){
	SIZE=84
	NAME=README.TXT
	DATA=$(curl --silent  -H "authorization: Bearer ${FEX_TOKEN}" -H 'Content-Type: application/json' -d "{\"directory_id\":null,\"size\":${SIZE},\"name\":\"${NAME}\"}" https://api.fex.net/api/${FEX_API_VERSION}/anonymous/file)
	UPLOAD_URL=$(echo "$DATA" | sed -n -E 's/.*"location":"([^"]+)".*/\1/p')
	curl --silent  -H "authorization: Bearer ${FEX_TOKEN}" -H 'fsp-version: 1.0.0' -H 'fsp-offset: 0' -H "fsp-size: ${SIZE}" -X POST --data '' ${UPLOAD_URL}
	RESPONSE=$(curl --silent  -H "authorization: Bearer ${FEX_TOKEN}" --show-error --progress-bar -H 'fsp-version: 1.0.0' -H 'fsp-offset: 0' -H "fsp-size: ${SIZE}" -X PATCH --data-binary $'This is shared folder created from fexcli utils.\nhttps://github.com/radroxx/fex.net\n' ${UPLOAD_URL})
	#echo "${RESPONSE}" | sed -n -E 's/.*"id":([^",]+)?.*/\1/p'
	echo "${DATA}" | sed -n -E 's/.*"anon_upload_link":"([^"]+)".*/\1/p'
}

function fex_test() {
	fex help
	
	dd if=/dev/urandom of=test.img bs=1M count=10

	echo ""
	echo "Начало тестирования. Status = 0 - значит что все хорошо."
	echo ""
	echo "Тестируем создание"
	TOKEN=$( fex anonymous )
	echo "Получен token:" ${TOKEN}
	LINK=$(fex create "${TOKEN}")
	echo "Получен LINK: https://fex.net/s/${LINK}"

	#echo ""
	#echo "Тестируем получение токена."
	#FEX_TOKEN=$( fex token ${FEX_ID} )
	#echo "Получен token:" ${FEX_TOKEN}

	echo ""
	echo "Тестируем добавление файла."
	FILE_ID=$( fex file ${TOKEN} add test.img )
	echo "Status $?"

	echo ""
	echo "Тестируем получение списка файлов."
	fex file ${TOKEN} list share/${LINK}
	echo "Status $?"

	echo ""
	echo "Тестируем удаление файла."
	fex file ${TOKEN} del ${FILE_ID}
	echo "Status $?"

	echo ""
	echo "Тестируем получение списка файлов."
	fex file ${TOKEN} list share/${LINK}
	echo "Status $?"
	
	echo ""
	echo "Тестируем добавление папки."
	FEX_DIR1=$( fex dir ${TOKEN} add dir1 )
	echo "Status $?"

	echo ""
	echo "Тестируем добавление папки в папку."
	FEX_DIR2=$( fex dir ${TOKEN} add dir2 ${FEX_DIR1} )
	echo "Status $?"

	echo ""
	echo "Тестируем добавление файла в папку."
	fex file ${TOKEN} add test.img ${FEX_DIR1}
	echo "Status $?"

	echo ""
	echo "Тестируем получение списка файлов."
	fex file ${TOKEN} list share/${LINK}
	echo "Status $?"

	echo ""
	echo "Тестируем удаление папки."
	FEX_DIR2=$( fex dir ${TOKEN} del ${FEX_DIR2} )
	echo "Status $?"

	echo ""
	echo "Тестируем получение списка файлов."
	fex file ${TOKEN} list share/${LINK}
	echo "Status $?"

	#echo ""
	#echo "Тестируем загрузку папки."
	#FEX_DIR2=$( fex dir ${TOKEN} get ${FEX_DIR1} )
	#echo "Status $?"
	
	rm test.img
}

fex() {
	POSITIONAL=()
	while [[ $# -gt 0 ]]
	do
	key="$1"
	case $key in
		--quit)
		QUIET=--silent
		shift
		;;
		-q)
		QUIET=--silent
		shift
		;;
		*)
		POSITIONAL+=("$1") # save it in an array for later
		shift
		;;
	esac
	done
	set -- "${POSITIONAL[@]}" # restore positional parameters

	FEX_TOKEN="${POSITIONAL[1]}"
	fex_${POSITIONAL[0]-help} "${POSITIONAL[@]}"
}

fex "$@"
